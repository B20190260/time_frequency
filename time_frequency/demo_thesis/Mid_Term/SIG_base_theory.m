% 采样频率100MHz，幅度1V
% 本脚本文件包含所有【时频分析理论章节】相关图像生成的语句，
% 某些功能由于太占空间封装到函数里面了，详情查看大注释。


%% 解析信号的频谱性质示例
clear all; close all; clc; 
Fs = 100;N=128; %单位对应MHz, us
t = (0:(N-1))/Fs; f = linspace(-Fs/2,Fs/2,N);
s = real(fmconst(N,0.07,1) + fmconst(N,0.22,1));%7M+22M COS信号叠加
sF = abs(fftshift(fft(s)));sF = sF/max(sF);
sa = hilbert(s);%解析信号
saF = abs(fftshift(fft(sa)));saF = saF/max(saF);
%绘制正弦信号及其频谱
figure;plot(t,s,'k-'); xlabel('时间/\mus');ylabel('幅度/V');
set_gca_style([7,4]);
figure;plot(f,sF,'k-'); xlabel('频率/MHz');ylabel('归一化幅度');
set_gca_style([7,4]);
%绘制解析信号及其频谱
figure;plot(t,real(sa),'b^-','LineWidth',1.3,'MarkerSize',3);hold on; 
plot(t,imag(sa),'k-.','LineWidth',0.7); xlabel('时间/\mus');ylabel('幅度/V');legend('实部','虚部');
set_gca_style([7,4]);
figure;plot(f,saF,'k-'); xlabel('频率/MHz');ylabel('归一化幅度');
set_gca_style([7,4]);


pause
%% LFM信号及其频谱
clear all; close all; clc; 
Fs = 100;N=512; %单位对应MHz, us
t = (0:(N-1))/Fs; f = linspace(-Fs/2,Fs/2,N);
[Y,IFLAW]=fmlin(N,0.00001,0.5);
figure('Name','LFM信号的时域'),plot(t,real(Y));%CHIRP信号
xlabel('时间/\mus');ylabel('幅度/V');set_gca_style([7,4]);

Y_W=abs(fftshift(abs(fft(Y)).^2));%
Y_W = Y_W/max(Y_W);
figure('Name','LFM信号的频域'),plot(f,abs(Y_W));%频谱
xlabel('频率/MHz');ylabel('归一化幅度');set_gca_style([7,4]);


pause
%% LFM在FRFT域的最佳估计展示
clear,clc,close all;
N=128;      %采样点数
r=0.05;     %分数域采样间隔，实际仿真时越小越精确
fs =1;  %采样频率
f0 = 0;  fend = 0.5;
s = fmlin(N,f0,fend,1);
t = 1:N;
f = linspace(-0.5,0.5,N);%频率点【必须是正负连续的，fmlin直接返回的f不正确】
% 不同阶数下的FRFT变换
a=0:r:2;    %FRFT阶数，参考论文2.1
G=zeros(length(a),length(s));	%不同阶数的变换结果保存
f_opt=0;        %记录最大频点
for l=1:length(a)
    T=frft_org(s,a(l));         %分数阶傅立叶变换
    G(l,:)=abs(T(:));       %取变换后的幅度
  if(f_opt<=max(abs(T(:))))     
    [f_opt,f_ind]=max(abs(T(:)));       %当前最大点在当前域的横坐标点
    a_opt=a(l);                %当前最大值点的阶数a
  end
end
%绘制三维图形
[xt,yf]=meshgrid(a,f);             %获取坐标轴坐标
surf(xt',yf',G);               % colormap('Autumn');     %颜色模式
xlabel('p');ylabel('u');%u为在p阶数下的等效频域
axis tight; grid on;
%计算调频斜率
nor_coef=(t(N)-t(1))/fs;      %根据采样率计算归一化因子，注意论文上的斜率是以数字频率为单位的，因此公式不完全一样
kr=-cot(a_opt*pi/2)/nor_coef;   %k参数的估计值，其中alpha=pi*a/2
%计算起始频率
u0=f(f_ind);      %最大点对应的等效频率
f_center=u0*csc(a_opt*pi/2);  % 中心频率f0的估计值
fprintf('产生：调频斜率=%f， 中心频率为=%f \n',(fend-f0)/N*fs,(f0+fend)/2);
fprintf('估计：调频斜率=%f， 中心频率为=%f \n',kr,f_center);
% tfsapl(s,G,'GrayScale','on','xlabel','p','ylabel','u');%效果也不好


pause
%% SFM信号及其频谱
clear,clc,close all;
Fs = 100;N=512; %单位对应MHz, us
t = (0:(N-1))/Fs; f = linspace(-Fs/2,Fs/2,N);
[Y,IFLAW]=fmsin(N,0.0001,0.5);
figure('Name','SFM信号的时域'),plot(t,real(Y));%CHIRP信号
xlabel('时间/\mus');ylabel('幅度/V');set_gca_style([7,4]);

Y_W=abs(fftshift(abs(fft(Y)).^2));%
Y_W = Y_W/max(Y_W);
figure('Name','SFM信号的频域'),plot(f,abs(Y_W));%频谱
xlabel('频率/MHz');ylabel('归一化幅度');set_gca_style([7,4]);


pause
%% SFM信号的SFMT变换
clear all; clc; close all;
N = 128; k0 = 2;l0 = 16;%信号参数
t = [0:N-1]';
s = exp(1i*l0/k0*sin(2*pi*k0*t/N));%plot(t,real(s),'.-') %公式5，已知k0和l0时恢复原始信号的方法
[X,s_hat] = sfmt(s);
surf(abs(X));xlabel('k');ylabel('l');axis tight; grid on;
colormap('hot');%shading interp






